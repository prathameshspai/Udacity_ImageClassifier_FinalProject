{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Developing an AI application\n",
    "\n",
    "Going forward, AI algorithms will be incorporated into more and more everyday applications. For example, you might want to include an image classifier in a smart phone app. To do this, you'd use a deep learning model trained on hundreds of thousands of images as part of the overall application architecture. A large part of software development in the future will be using these types of models as common parts of applications. \n",
    "\n",
    "In this project, you'll train an image classifier to recognize different species of flowers. You can imagine using something like this in a phone app that tells you the name of the flower your camera is looking at. In practice you'd train this classifier, then export it for use in your application. We'll be using [this dataset](http://www.robots.ox.ac.uk/~vgg/data/flowers/102/index.html) of 102 flower categories, you can see a few examples below. \n",
    "\n",
    "<img src='assets/Flowers.png' width=500px>\n",
    "\n",
    "The project is broken down into multiple steps:\n",
    "\n",
    "* Load and preprocess the image dataset\n",
    "* Train the image classifier on your dataset\n",
    "* Use the trained classifier to predict image content\n",
    "\n",
    "We'll lead you through each part which you'll implement in Python.\n",
    "\n",
    "When you've completed this project, you'll have an application that can be trained on any set of labeled images. Here your network will be learning about flowers and end up as a command line application. But, what you do with your new skills depends on your imagination and effort in building a dataset. For example, imagine an app where you take a picture of a car, it tells you what the make and model is, then looks up information about it. Go build your own dataset and make something new.\n",
    "\n",
    "First up is importing the packages you'll need. It's good practice to keep all the imports at the beginning of your code. As you work through this notebook and find you need to import a package, make sure to add the import up here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "# Imports here\n",
    "%matplotlib inline \n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "import torchvision\n",
    "from torch import nn\n",
    "from torch import optim\n",
    "from torchvision import datasets, transforms, models\n",
    "from collections import OrderedDict\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import DataLoader\n",
    "import matplotlib.pyplot as plt\n",
    "from torch import nn\n",
    "from PIL import Image\n",
    "print(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the data\n",
    "\n",
    "Here you'll use `torchvision` to load the data ([documentation](http://pytorch.org/docs/0.3.0/torchvision/index.html)). The data should be included alongside this notebook, otherwise you can [download it here](https://s3.amazonaws.com/content.udacity-data.com/nd089/flower_data.tar.gz). The dataset is split into three parts, training, validation, and testing. For the training, you'll want to apply transformations such as random scaling, cropping, and flipping. This will help the network generalize leading to better performance. You'll also need to make sure the input data is resized to 224x224 pixels as required by the pre-trained networks.\n",
    "\n",
    "The validation and testing sets are used to measure the model's performance on data it hasn't seen yet. For this you don't want any scaling or rotation transformations, but you'll need to resize then crop the images to the appropriate size.\n",
    "\n",
    "The pre-trained networks you'll use were trained on the ImageNet dataset where each color channel was normalized separately. For all three sets you'll need to normalize the means and standard deviations of the images to what the network expects. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`, calculated from the ImageNet images.  These values will shift each color channel to be centered at 0 and range from -1 to 1.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = 'flowers'\n",
    "train_dir = data_dir + '/train'\n",
    "valid_dir = data_dir + '/valid'\n",
    "test_dir = data_dir + '/test'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f31219d6f28>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f31242b2da0>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 251,
       "width": 259
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Define your transforms for the training, validation, and testing sets\n",
    "traindata_transforms = transforms.Compose([transforms.RandomRotation(30),\n",
    "                                              transforms.RandomResizedCrop(224),\n",
    "                                              transforms.RandomHorizontalFlip(),\n",
    "                                              transforms.ToTensor(),\n",
    "                                              transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
    "                                              ])\n",
    "                   \n",
    "validdata_transforms = transforms.Compose([transforms.Resize(255),\n",
    "                                              transforms.CenterCrop(224),\n",
    "                                              transforms.ToTensor(),\n",
    "                                              transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
    "                                              ])\n",
    "                   \n",
    "testdata_transforms = transforms.Compose([transforms.Resize(255),\n",
    "                                              transforms.CenterCrop(224),\n",
    "                                              transforms.ToTensor(),\n",
    "                                              transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
    "                                              ])\n",
    "                  \n",
    "\n",
    "# TODO: Load the datasets with ImageFolder\n",
    "trainimage_datasets = datasets.ImageFolder(train_dir, transform = traindata_transforms)\n",
    "validimage_datasets = datasets.ImageFolder(valid_dir, transform = validdata_transforms)\n",
    "testimage_datasets = datasets.ImageFolder(test_dir, transform = testdata_transforms)\n",
    "\n",
    "\n",
    "# TODO: Using the image datasets and the trainforms, define the dataloaders\n",
    "traindataloaders = torch.utils.data.DataLoader(trainimage_datasets,batch_size=64, shuffle=True)\n",
    "validdataloaders = torch.utils.data.DataLoader(validimage_datasets,batch_size=64, shuffle=True)\n",
    "testdataloaders = torch.utils.data.DataLoader(testimage_datasets,batch_size=64, shuffle=True)\n",
    "\n",
    "\n",
    "inputs, labels = next(iter(traindataloaders))\n",
    "image = inputs[0]\n",
    "image = image.permute(1, 2, 0)\n",
    "# For RGB channels to be between 0 and 1\n",
    "image = (1/(2*2.25)) * image + 0.5\n",
    "plt.imshow(image.numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Label mapping\n",
    "\n",
    "You'll also need to load in a mapping from category label to category name. You can find this in the file `cat_to_name.json`. It's a JSON object which you can read in with the [`json` module](https://docs.python.org/2/library/json.html). This will give you a dictionary mapping the integer encoded categories to the actual names of the flowers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "with open('cat_to_name.json', 'r') as f:\n",
    "    cat_to_name = json.load(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building and training the classifier\n",
    "\n",
    "Now that the data is ready, it's time to build and train the classifier. As usual, you should use one of the pretrained models from `torchvision.models` to get the image features. Build and train a new feed-forward classifier using those features.\n",
    "\n",
    "We're going to leave this part up to you. Refer to [the rubric](https://review.udacity.com/#!/rubrics/1663/view) for guidance on successfully completing this section. Things you'll need to do:\n",
    "\n",
    "* Load a [pre-trained network](http://pytorch.org/docs/master/torchvision/models.html) (If you need a starting point, the VGG networks work great and are straightforward to use)\n",
    "* Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout\n",
    "* Train the classifier layers using backpropagation using the pre-trained network to get the features\n",
    "* Track the loss and accuracy on the validation set to determine the best hyperparameters\n",
    "\n",
    "We've left a cell open for you below, but use as many as you need. Our advice is to break the problem up into smaller parts you can run separately. Check that each part is doing what you expect, then move on to the next. You'll likely find that as you work through each part, you'll need to go back and modify your previous code. This is totally normal!\n",
    "\n",
    "When training make sure you're updating only the weights of the feed-forward network. You should be able to get the validation accuracy above 70% if you build everything right. Make sure to try different hyperparameters (learning rate, units in the classifier, epochs, etc) to find the best model. Save those hyperparameters to use as default values in the next part of the project.\n",
    "\n",
    "One last important tip if you're using the workspace to run your code: To avoid having your workspace disconnect during the long-running tasks in this notebook, please read in the earlier page in this lesson called Intro to\n",
    "GPU Workspaces about Keeping Your Session Active. You'll want to include code from the workspace_utils.py module.\n",
    "\n",
    "**Note for Workspace users:** If your network is over 1 GB when saved as a checkpoint, there might be issues with saving backups in your workspace. Typically this happens with wide dense layers after the convolutional layers. If your saved checkpoint is larger than 1 GB (you can open a terminal and check with `ls -lh`), you should reduce the size of your hidden layers and train again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/torchvision-0.2.1-py3.6.egg/torchvision/models/densenet.py:212: UserWarning: nn.init.kaiming_normal is now deprecated in favor of nn.init.kaiming_normal_.\n",
      "Downloading: \"https://download.pytorch.org/models/densenet121-a639ec97.pth\" to /root/.torch/models/densenet121-a639ec97.pth\n",
      "100%|██████████| 32342954/32342954 [00:00<00:00, 59924075.19it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DenseNet(\n",
       "  (features): Sequential(\n",
       "    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu0): ReLU(inplace)\n",
       "    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (denseblock1): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition1): _Transition(\n",
       "      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock2): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition2): _Transition(\n",
       "      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock3): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer17): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer18): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer19): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer20): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer21): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer22): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer23): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer24): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition3): _Transition(\n",
       "      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock4): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  )\n",
       "  (classifier): Linear(in_features=1024, out_features=1000, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TODO: Build and train your network\n",
    "model = models.densenet121(pretrained=True)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "for params in model.parameters():\n",
    "    params.requires_grad = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DenseNet(\n",
       "  (features): Sequential(\n",
       "    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
       "    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (relu0): ReLU(inplace)\n",
       "    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "    (denseblock1): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition1): _Transition(\n",
       "      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock2): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition2): _Transition(\n",
       "      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock3): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer17): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer18): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer19): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer20): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer21): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer22): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer23): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer24): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (transition3): _Transition(\n",
       "      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace)\n",
       "      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
       "    )\n",
       "    (denseblock4): _DenseBlock(\n",
       "      (denselayer1): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer2): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer3): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer4): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer5): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer6): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer7): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer8): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer9): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer10): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer11): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer12): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer13): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer14): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer15): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "      (denselayer16): _DenseLayer(\n",
       "        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu1): ReLU(inplace)\n",
       "        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
       "        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "        (relu2): ReLU(inplace)\n",
       "        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
       "      )\n",
       "    )\n",
       "    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  )\n",
       "  (classifier): Sequential(\n",
       "    (0): Linear(in_features=1024, out_features=1000, bias=True)\n",
       "    (1): ReLU()\n",
       "    (2): Dropout(p=0.25)\n",
       "    (3): Linear(in_features=1000, out_features=500, bias=True)\n",
       "    (4): ReLU()\n",
       "    (5): Linear(in_features=500, out_features=102, bias=True)\n",
       "    (6): LogSoftmax()\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier = nn.Sequential(\n",
    "    nn.Linear(1024, 1000),\n",
    "    nn.ReLU(),\n",
    "    nn.Dropout(0.25),\n",
    "    nn.Linear(1000, 500),\n",
    "    nn.ReLU(),\n",
    "    nn.Linear(500, 102),\n",
    "    nn.LogSoftmax(dim = 1),\n",
    ")\n",
    "\n",
    "model.classifier = classifier\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion=nn.NLLLoss()\n",
    "optimizer=optim.Adam(model.classifier.parameters(), lr=0.003)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/7.. Train loss: 4.499.. Valid loss: 4.067.. Valid accuracy: 0.155\n",
      "Epoch 1/7.. Train loss: 3.570.. Valid loss: 2.789.. Valid accuracy: 0.292\n",
      "Epoch 1/7.. Train loss: 2.682.. Valid loss: 2.125.. Valid accuracy: 0.404\n",
      "Epoch 1/7.. Train loss: 2.231.. Valid loss: 1.636.. Valid accuracy: 0.554\n",
      "Epoch 2/7.. Train loss: 1.911.. Valid loss: 1.449.. Valid accuracy: 0.585\n",
      "Epoch 2/7.. Train loss: 1.705.. Valid loss: 1.261.. Valid accuracy: 0.650\n",
      "Epoch 2/7.. Train loss: 1.529.. Valid loss: 1.061.. Valid accuracy: 0.708\n",
      "Epoch 2/7.. Train loss: 1.469.. Valid loss: 0.900.. Valid accuracy: 0.760\n",
      "Epoch 3/7.. Train loss: 1.312.. Valid loss: 0.924.. Valid accuracy: 0.736\n",
      "Epoch 3/7.. Train loss: 1.278.. Valid loss: 0.850.. Valid accuracy: 0.744\n",
      "Epoch 3/7.. Train loss: 1.236.. Valid loss: 0.836.. Valid accuracy: 0.763\n",
      "Epoch 3/7.. Train loss: 1.239.. Valid loss: 0.734.. Valid accuracy: 0.801\n",
      "Epoch 4/7.. Train loss: 1.099.. Valid loss: 0.741.. Valid accuracy: 0.792\n",
      "Epoch 4/7.. Train loss: 1.020.. Valid loss: 0.750.. Valid accuracy: 0.780\n",
      "Epoch 4/7.. Train loss: 1.155.. Valid loss: 0.615.. Valid accuracy: 0.840\n",
      "Epoch 4/7.. Train loss: 1.144.. Valid loss: 0.560.. Valid accuracy: 0.856\n",
      "Epoch 5/7.. Train loss: 0.964.. Valid loss: 0.587.. Valid accuracy: 0.832\n",
      "Epoch 5/7.. Train loss: 0.981.. Valid loss: 0.709.. Valid accuracy: 0.795\n",
      "Epoch 5/7.. Train loss: 1.129.. Valid loss: 0.595.. Valid accuracy: 0.832\n",
      "Epoch 5/7.. Train loss: 1.043.. Valid loss: 0.577.. Valid accuracy: 0.836\n",
      "Epoch 6/7.. Train loss: 1.008.. Valid loss: 0.600.. Valid accuracy: 0.832\n",
      "Epoch 6/7.. Train loss: 0.954.. Valid loss: 0.491.. Valid accuracy: 0.860\n",
      "Epoch 6/7.. Train loss: 0.951.. Valid loss: 0.555.. Valid accuracy: 0.842\n",
      "Epoch 6/7.. Train loss: 0.930.. Valid loss: 0.550.. Valid accuracy: 0.845\n",
      "Epoch 7/7.. Train loss: 0.945.. Valid loss: 0.508.. Valid accuracy: 0.859\n",
      "Epoch 7/7.. Train loss: 0.911.. Valid loss: 0.509.. Valid accuracy: 0.852\n",
      "Epoch 7/7.. Train loss: 0.897.. Valid loss: 0.510.. Valid accuracy: 0.858\n",
      "Epoch 7/7.. Train loss: 0.920.. Valid loss: 0.457.. Valid accuracy: 0.864\n"
     ]
    }
   ],
   "source": [
    "model.to('cuda')\n",
    "epochs = 7\n",
    "steps = 0\n",
    "running_loss = 0\n",
    "print_every = 25\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    for inputs, labels in traindataloaders:\n",
    "        steps += 1\n",
    "        # Move input and label tensors to the default device\n",
    "        inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        logps = model.forward(inputs)\n",
    "        loss = criterion(logps, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        running_loss += loss.item()\n",
    "        \n",
    "        if steps % print_every == 0:\n",
    "            valid_loss = 0\n",
    "            accuracy = 0\n",
    "            model.eval()\n",
    "            with torch.no_grad():\n",
    "                for inputs, labels in validdataloaders:\n",
    "                    inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
    "                    logps = model.forward(inputs)\n",
    "                    batch_loss = criterion(logps, labels)\n",
    "                    \n",
    "                    valid_loss += batch_loss.item()\n",
    "                    \n",
    "                    ps = torch.exp(logps)\n",
    "                    top_p, top_class = ps.topk(1, dim=1)\n",
    "                    equals = top_class == labels.view(*top_class.shape)\n",
    "                    accuracy += torch.mean(equals.type(torch.FloatTensor)).item()\n",
    "                    \n",
    "            print(f\"Epoch {epoch+1}/{epochs}.. \"\n",
    "                  f\"Train loss: {running_loss/print_every:.3f}.. \"\n",
    "                  f\"Valid loss: {valid_loss/len(validdataloaders):.3f}.. \"\n",
    "                  f\"Valid accuracy: {accuracy/len(validdataloaders):.3f}\")\n",
    "            running_loss = 0\n",
    "            model.train()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing your network\n",
    "\n",
    "It's good practice to test your trained network on test data, images the network has never seen either in training or validation. This will give you a good estimate for the model's performance on completely new images. Run the test images through the network and measure the accuracy, the same way you did validation. You should be able to reach around 70% accuracy on the test set if the model has been trained well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 76.645%\n"
     ]
    }
   ],
   "source": [
    "# TODO: Do validation on the test set\n",
    "accuracy =0\n",
    "with torch.no_grad ():\n",
    "    for inputs,labels in testdataloaders:\n",
    "        inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
    "        outputs = model (inputs)\n",
    "        ps = torch.exp(outputs).data\n",
    "        equality = (labels.data == ps.max(1)[1])\n",
    "        accuracy += equality.type_as(torch.FloatTensor()).mean()\n",
    "        \n",
    "print(\"Test Accuracy: {:.3f}\".format(accuracy/len(testdataloaders)*100)+\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save the checkpoint\n",
    "\n",
    "Now that your network is trained, save the model so you can load it later for making predictions. You probably want to save other things such as the mapping of classes to indices which you get from one of the image datasets: `image_datasets['train'].class_to_idx`. You can attach this to the model as an attribute which makes inference easier later on.\n",
    "\n",
    "```model.class_to_idx = image_datasets['train'].class_to_idx```\n",
    "\n",
    "Remember that you'll want to completely rebuild the model later so you can use it for inference. Make sure to include any information you need in the checkpoint. If you want to load the model and keep training, you'll want to save the number of epochs as well as the optimizer state, `optimizer.state_dict`. You'll likely want to use this trained model in the next part of the project, so best to save it now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Save the checkpoint\n",
    "\n",
    "model.class_to_idx = trainimage_datasets.class_to_idx\n",
    "checkpoint = {\n",
    "              'classifier':  model.classifier,\n",
    "              'mapping': model.class_to_idx,\n",
    "              'optimizer' : optimizer.state_dict(),\n",
    "              'state_dict': model.state_dict()}\n",
    "\n",
    "torch.save(checkpoint, 'checkpoint.pth')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the checkpoint\n",
    "\n",
    "At this point it's good to write a function that can load a checkpoint and rebuild the model. That way you can come back to this project and keep working on it without having to retrain the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Write a function that loads a checkpoint and rebuilds the model\n",
    "def load_checkpoint(filepath):\n",
    "    checkpoint = torch.load(filepath)\n",
    "    model = models.densenet121(pretrained=True)\n",
    "    model.classifier = checkpoint ['classifier']\n",
    "    model.class_to_idx = checkpoint ['mapping']\n",
    "    model.load_state_dict (checkpoint ['state_dict'])\n",
    "    \n",
    "    for param in model.parameters(): \n",
    "        param.requires_grad = False    \n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inference for classification\n",
    "\n",
    "Now you'll write a function to use a trained network for inference. That is, you'll pass an image into the network and predict the class of the flower in the image. Write a function called `predict` that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. It should look like \n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```\n",
    "\n",
    "First you'll need to handle processing the input image such that it can be used in your network. \n",
    "\n",
    "## Image Preprocessing\n",
    "\n",
    "You'll want to use `PIL` to load the image ([documentation](https://pillow.readthedocs.io/en/latest/reference/Image.html)). It's best to write a function that preprocesses the image so it can be used as input for the model. This function should process the images in the same manner used for training. \n",
    "\n",
    "First, resize the images where the shortest side is 256 pixels, keeping the aspect ratio. This can be done with the [`thumbnail`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) or [`resize`](http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail) methods. Then you'll need to crop out the center 224x224 portion of the image.\n",
    "\n",
    "Color channels of images are typically encoded as integers 0-255, but the model expected floats 0-1. You'll need to convert the values. It's easiest with a Numpy array, which you can get from a PIL image like so `np_image = np.array(pil_image)`.\n",
    "\n",
    "As before, the network expects the images to be normalized in a specific way. For the means, it's `[0.485, 0.456, 0.406]` and for the standard deviations `[0.229, 0.224, 0.225]`. You'll want to subtract the means from each color channel, then divide by the standard deviation. \n",
    "\n",
    "And finally, PyTorch expects the color channel to be the first dimension but it's the third dimension in the PIL image and Numpy array. You can reorder dimensions using [`ndarray.transpose`](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.transpose.html). The color channel needs to be first and retain the order of the other two dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "def process_image(image):\n",
    "    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,\n",
    "        returns an Numpy array\n",
    "    '''\n",
    "    \n",
    "    # TODO: Process a PIL image for use in a PyTorch model\n",
    "    im = Image.open(image)\n",
    "    \n",
    "    if im.size[0] > im.size[1]:\n",
    "        im.resize((50000, 256))\n",
    "    else:\n",
    "        im.resize((256, 50000))\n",
    "    \n",
    "    new_width = 224\n",
    "    new_height = 224\n",
    "    \n",
    "    left = (im.size[0] - new_width)/2\n",
    "    top = ( im.size[1] - new_height)/2\n",
    "    right = (im.size[0] + new_width)/2\n",
    "    bottom = ( im.size[1] + new_height)/2\n",
    "    \n",
    "    im = im.crop((left, top, right, bottom))\n",
    "    \n",
    "    np_image = np.array(im)/255\n",
    "    np_mean = np.array([0.485, 0.456, 0.406]) \n",
    "    np_std = np.array([0.229, 0.224, 0.225]) \n",
    "    im = (im - np_mean)/np_std\n",
    "    \n",
    "    np_image.transpose((2,0,1))\n",
    "    \n",
    "    return np_image\n",
    "print(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To check your work, the function below converts a PyTorch tensor and displays it in the notebook. If your `process_image` function works, running the output through this function should return the original image (except for the cropped out portions)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def imshow(image, ax=None, title=None):\n",
    "    \"\"\"Imshow for Tensor.\"\"\"\n",
    "    if ax is None:\n",
    "        fig, ax = plt.subplots()\n",
    "    \n",
    "    # PyTorch tensors assume the color channel is the first dimension\n",
    "    # but matplotlib assumes is the third dimension\n",
    "    image = image.numpy().transpose((1, 2, 0))\n",
    "    \n",
    "    # Undo preprocessing\n",
    "    mean = np.array([0.485, 0.456, 0.406])\n",
    "    std = np.array([0.229, 0.224, 0.225])\n",
    "    image = std * image + mean\n",
    "    \n",
    "    # Image needs to be clipped between 0 and 1 or it looks like noise when displayed\n",
    "    image = np.clip(image, 0, 1)\n",
    "    \n",
    "    ax.imshow(image)\n",
    "    \n",
    "    return ax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (3,) (224,3,224) ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-59bcca82e01c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_image\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_dir\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'/1/image_06743.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mim_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mim_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-16-3a715a51c757>\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(image, ax, title)\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mmean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0.485\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.456\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.406\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mstd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0.229\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.224\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.225\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstd\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mimage\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mmean\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;31m# Image needs to be clipped between 0 and 1 or it looks like noise when displayed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (3,) (224,3,224) "
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f311899f160>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 252,
       "width": 380
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "im = process_image(test_dir+'/1/image_06743.jpg')\n",
    "im_tensor = torch.from_numpy(im)\n",
    "imshow(im_tensor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Class Prediction\n",
    "\n",
    "Once you can get images in the correct format, it's time to write a function for making predictions with your model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. You'll want to calculate the class probabilities then find the $K$ largest values.\n",
    "\n",
    "To get the top $K$ largest values in a tensor use [`x.topk(k)`](http://pytorch.org/docs/master/torch.html#torch.topk). This method returns both the highest `k` probabilities and the indices of those probabilities corresponding to the classes. You need to convert from these indices to the actual class labels using `class_to_idx` which hopefully you added to the model or from an `ImageFolder` you used to load the data ([see here](#Save-the-checkpoint)). Make sure to invert the dictionary so you get a mapping from index to class as well.\n",
    "\n",
    "Again, this method should take a path to an image and a model checkpoint, then return the probabilities and classes.\n",
    "\n",
    "```python\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "> [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]\n",
    "> ['70', '3', '45', '62', '55']\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "Given groups=1, weight[64, 3, 7, 7], so expected input[1, 224, 224, 3] to have 3 channels, but got 224 channels instead",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-26-0606cfb3eae5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mimage_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_dir\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'/2/image_05100.jpg'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0mprobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclasses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-26-0606cfb3eae5>\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(image_path, model, topk)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msoftmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torchvision-0.2.1-py3.6.egg/torchvision/models/densenet.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m         \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mavg_pool2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstride\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_modules\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    489\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 491\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    299\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m         return F.conv2d(input, self.weight, self.bias, self.stride,\n\u001b[0;32m--> 301\u001b[0;31m                         self.padding, self.dilation, self.groups)\n\u001b[0m\u001b[1;32m    302\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Given groups=1, weight[64, 3, 7, 7], so expected input[1, 224, 224, 3] to have 3 channels, but got 224 channels instead"
     ]
    }
   ],
   "source": [
    "def predict(image_path, model, topk=5):\n",
    "    ''' Predict the class (or classes) of an image using a trained deep learning model.\n",
    "    '''\n",
    "    model.cuda()\n",
    "    # TODO: Implement the code to predict the class from an image file\n",
    "    \n",
    "    img = process_image(image_path)\n",
    "    img = torch.from_numpy(img).unsqueeze_(0)\n",
    "   \n",
    "    \n",
    "    with torch.no_grad():\n",
    "        output = model.forward(img.cuda())\n",
    "        \n",
    "    ps = F.softmax(output.data,dim=1)\n",
    "    x=ps.topk(topk)\n",
    "    return x\n",
    "\n",
    "image_path = test_dir+'/2/image_05100.jpg'\n",
    "probs, classes = predict(image_path, model)\n",
    "print(probs)\n",
    "print(classes)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sanity Checking\n",
    "\n",
    "Now that you can use a trained model for predictions, check to make sure it makes sense. Even if the testing accuracy is high, it's always good to check that there aren't obvious bugs. Use `matplotlib` to plot the probabilities for the top 5 classes as a bar graph, along with the input image. It should look like this:\n",
    "\n",
    "<img src='assets/inference_example.png' width=300px>\n",
    "\n",
    "You can convert from the class integer encoding to actual flower names with the `cat_to_name.json` file (should have been loaded earlier in the notebook). To show a PyTorch tensor as an image, use the `imshow` function defined above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Display an image along with the top 5 classes\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
